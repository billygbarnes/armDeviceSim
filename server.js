#!/usr/bin/env node
/*


===================================================================================
B. Barnes
*/

var mqtt = require('mqtt'); 

var iotHub = process.env.IOTHUBURI;
var deviceId = process.env.DEVNAME;
var sasToken = process.env.DEVSAS;



// code from here downward works with the above parameters pointing to
// iotHubTestABB, RG1, and the SAS.  RG1 created with default settings, SAS generated by dev explorer.

var azUserName = iotHub + '/' + deviceId; // + '/' + apiVer; //apiVer appears in the first article, not others.
var url  = 'mqtts://' + iotHub + ':8883';
var azTopic = 'devices/' + deviceId + '/messages/events/';

var opts = {
	clientId: deviceId,
	username: azUserName,
	password: sasToken
}

console.log("url = " + url);
console.log("topic = " + azTopic);
console.log("\nopts.username = " + opts.username);
console.log("opts.password = " + opts.password);


var client = mqtt.connect(url, opts);

client.on('connect', function () {
  console.log('connected!');
  setInterval(intervalFunc, 300);

});



var T = 0;
var F = 0;
var S = 0;

function intervalFunc() {
 
 // To send msg in VSC:
 // {"d":{"gwName":"NODEJS","devName":"AGA3-1","FlowRate":0,"Temperature":0,"devIsAlive":true,"SeqNumb":0},"time":"2019:03:20T06:13:06"}
 
  // Mimic the output of Redigate.
  var payload = {"d":
  {
      "gwName":"AZDEVSIM",
      "devName":"AGA3-1",
      "FlowRate":F,
      "Temperature":T,
      "devIsAlive":true,
      "SeqNumb":S
  }
  }

  console.log('Sending payload: ' + payload);

  client.publish(azTopic, JSON.stringify(payload), { qos: 1 }, function() {
    //client.end();
    //process.exit();
  });

  S = S + 1;
  T = 72 + Math.random();
  F = (Date.now() % 10) + Math.random();


}

